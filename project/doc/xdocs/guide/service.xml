<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "../../schema/dtd/document-v20.dtd">
<document>
	<header>
		<title>Plugin JUEL</title>
	</header>
	<body>
		<p>
			A recent addition to <code>javax.el.ExpressionFactory</code> have been the static methods
			<code>newInstance()</code> and <code>newInstance(java.util.Properties)</code>.
		</p>
		<p>
			With these methods, selection of a particular EL implementation is completely
			transparent to the application code. E.g., the first line of our
			<a href="site:start">Quickstart example</a> could be rewritten as
		</p>
		<source>ExpressionFactory factory = ExpressionFactory.newInstance();</source>
		<p>
			Either of the new methods will determine a factory implementation class and create
			an instance of it. The first variant will use its default constructor. The latter
			will use a constructor taking a single <code>java.util.Properties</code> object as parameter.
			The lookup procedure uses the Service Provider API as detailed in the JAR specification.
		</p>
		<p>
			The <code>juel-spi-2.2.x.jar</code> does the trick: if on your classpath, the lookup
			procedure will detect <code>de.odysseus.el.ExpressionFactoryImpl</code> as service provider
			class.
		</p>
		<p>
			This way, <em>JUEL</em> can be used without code references to any of its
			implementation specific classes. Just <code>javax.el.*</code>...
		</p>
		<note>
			The new API is part of the EL since version 2.2 (JEE6). Therefore, it may not be
			supported in environments which are based on EL 2.1 (JEE5).
		</note>
		<p>
			Depending on your application's scenario, there may be several ways to register
			<em>JUEL</em> as default EL implementation.
		</p>
		<ul>
			<li>
				Place <code>juel-2.2.x.jar</code> into directory <code>JRE_HOME/lib/ext</code>.
				This will make JUEL available globally for all applications running in that
				environment.
			</li>
			<li>
				You may simply drop <code>juel-impl-2.2.x.jar</code>
				and <code>juel-spi-2.2.x.jar</code> into your <code>/WEB-INF/lib</code>
				directory. This will result in using <em>JUEL</em> as EL implementation for
				that particular web application.
			</li>
			<li>
				Of course you can also add the jar files to your classpath manually.
			</li>
		</ul>
		<p>
			Please refer to the section on <a href="site:basic/factory#config">Factory Configuration</a>
			on how to configure an expression factory via property files.
		</p>
	</body>
</document>
